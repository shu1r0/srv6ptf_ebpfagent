// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: packet_collector.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PacketCollectServiceClient is the client API for PacketCollectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketCollectServiceClient interface {
	SetPoll(ctx context.Context, in *PollSettingRequest, opts ...grpc.CallOption) (*PollSettingReply, error)
	GetPacketInfo(ctx context.Context, in *PacketInfoRequest, opts ...grpc.CallOption) (*PacketInfoReply, error)
	GetPacketInfoStream(ctx context.Context, in *PacketInfoStreamRequest, opts ...grpc.CallOption) (PacketCollectService_GetPacketInfoStreamClient, error)
}

type packetCollectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketCollectServiceClient(cc grpc.ClientConnInterface) PacketCollectServiceClient {
	return &packetCollectServiceClient{cc}
}

func (c *packetCollectServiceClient) SetPoll(ctx context.Context, in *PollSettingRequest, opts ...grpc.CallOption) (*PollSettingReply, error) {
	out := new(PollSettingReply)
	err := c.cc.Invoke(ctx, "/PacketCollectService/SetPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetCollectServiceClient) GetPacketInfo(ctx context.Context, in *PacketInfoRequest, opts ...grpc.CallOption) (*PacketInfoReply, error) {
	out := new(PacketInfoReply)
	err := c.cc.Invoke(ctx, "/PacketCollectService/GetPacketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetCollectServiceClient) GetPacketInfoStream(ctx context.Context, in *PacketInfoStreamRequest, opts ...grpc.CallOption) (PacketCollectService_GetPacketInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PacketCollectService_ServiceDesc.Streams[0], "/PacketCollectService/GetPacketInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetCollectServiceGetPacketInfoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PacketCollectService_GetPacketInfoStreamClient interface {
	Recv() (*PacketInfo, error)
	grpc.ClientStream
}

type packetCollectServiceGetPacketInfoStreamClient struct {
	grpc.ClientStream
}

func (x *packetCollectServiceGetPacketInfoStreamClient) Recv() (*PacketInfo, error) {
	m := new(PacketInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PacketCollectServiceServer is the server API for PacketCollectService service.
// All implementations must embed UnimplementedPacketCollectServiceServer
// for forward compatibility
type PacketCollectServiceServer interface {
	SetPoll(context.Context, *PollSettingRequest) (*PollSettingReply, error)
	GetPacketInfo(context.Context, *PacketInfoRequest) (*PacketInfoReply, error)
	GetPacketInfoStream(*PacketInfoStreamRequest, PacketCollectService_GetPacketInfoStreamServer) error
	mustEmbedUnimplementedPacketCollectServiceServer()
}

// UnimplementedPacketCollectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPacketCollectServiceServer struct {
}

func (UnimplementedPacketCollectServiceServer) SetPoll(context.Context, *PollSettingRequest) (*PollSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPoll not implemented")
}
func (UnimplementedPacketCollectServiceServer) GetPacketInfo(context.Context, *PacketInfoRequest) (*PacketInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPacketInfo not implemented")
}
func (UnimplementedPacketCollectServiceServer) GetPacketInfoStream(*PacketInfoStreamRequest, PacketCollectService_GetPacketInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPacketInfoStream not implemented")
}
func (UnimplementedPacketCollectServiceServer) mustEmbedUnimplementedPacketCollectServiceServer() {}

// UnsafePacketCollectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketCollectServiceServer will
// result in compilation errors.
type UnsafePacketCollectServiceServer interface {
	mustEmbedUnimplementedPacketCollectServiceServer()
}

func RegisterPacketCollectServiceServer(s grpc.ServiceRegistrar, srv PacketCollectServiceServer) {
	s.RegisterService(&PacketCollectService_ServiceDesc, srv)
}

func _PacketCollectService_SetPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketCollectServiceServer).SetPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PacketCollectService/SetPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketCollectServiceServer).SetPoll(ctx, req.(*PollSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PacketCollectService_GetPacketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketCollectServiceServer).GetPacketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PacketCollectService/GetPacketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketCollectServiceServer).GetPacketInfo(ctx, req.(*PacketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PacketCollectService_GetPacketInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PacketInfoStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PacketCollectServiceServer).GetPacketInfoStream(m, &packetCollectServiceGetPacketInfoStreamServer{stream})
}

type PacketCollectService_GetPacketInfoStreamServer interface {
	Send(*PacketInfo) error
	grpc.ServerStream
}

type packetCollectServiceGetPacketInfoStreamServer struct {
	grpc.ServerStream
}

func (x *packetCollectServiceGetPacketInfoStreamServer) Send(m *PacketInfo) error {
	return x.ServerStream.SendMsg(m)
}

// PacketCollectService_ServiceDesc is the grpc.ServiceDesc for PacketCollectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketCollectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PacketCollectService",
	HandlerType: (*PacketCollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPoll",
			Handler:    _PacketCollectService_SetPoll_Handler,
		},
		{
			MethodName: "GetPacketInfo",
			Handler:    _PacketCollectService_GetPacketInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPacketInfoStream",
			Handler:       _PacketCollectService_GetPacketInfoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packet_collector.proto",
}
