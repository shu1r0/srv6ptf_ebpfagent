// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTelemetry returns the embedded CollectionSpec for telemetry.
func loadTelemetry() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TelemetryBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load telemetry: %w", err)
	}

	return spec, err
}

// loadTelemetryObjects loads telemetry and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*telemetryObjects
//	*telemetryPrograms
//	*telemetryMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTelemetryObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTelemetry()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// telemetrySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type telemetrySpecs struct {
	telemetryProgramSpecs
	telemetryMapSpecs
}

// telemetrySpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type telemetryProgramSpecs struct {
	Egress  *ebpf.ProgramSpec `ebpf:"egress"`
	Ingress *ebpf.ProgramSpec `ebpf:"ingress"`
}

// telemetryMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type telemetryMapSpecs struct {
	ConfigMap  *ebpf.MapSpec `ebpf:"config_map"`
	CounterMap *ebpf.MapSpec `ebpf:"counter_map"`
	PerfMap    *ebpf.MapSpec `ebpf:"perf_map"`
}

// telemetryObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTelemetryObjects or ebpf.CollectionSpec.LoadAndAssign.
type telemetryObjects struct {
	telemetryPrograms
	telemetryMaps
}

func (o *telemetryObjects) Close() error {
	return _TelemetryClose(
		&o.telemetryPrograms,
		&o.telemetryMaps,
	)
}

// telemetryMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTelemetryObjects or ebpf.CollectionSpec.LoadAndAssign.
type telemetryMaps struct {
	ConfigMap  *ebpf.Map `ebpf:"config_map"`
	CounterMap *ebpf.Map `ebpf:"counter_map"`
	PerfMap    *ebpf.Map `ebpf:"perf_map"`
}

func (m *telemetryMaps) Close() error {
	return _TelemetryClose(
		m.ConfigMap,
		m.CounterMap,
		m.PerfMap,
	)
}

// telemetryPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTelemetryObjects or ebpf.CollectionSpec.LoadAndAssign.
type telemetryPrograms struct {
	Egress  *ebpf.Program `ebpf:"egress"`
	Ingress *ebpf.Program `ebpf:"ingress"`
}

func (p *telemetryPrograms) Close() error {
	return _TelemetryClose(
		p.Egress,
		p.Ingress,
	)
}

func _TelemetryClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed telemetry_bpfeb.o
var _TelemetryBytes []byte
